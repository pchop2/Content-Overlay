<?php
/** 
 *  This module provides a way to entice users to signup by showing intermediate pages 
 *  You will need to set the cookie 'content_overlay_visited' when the conditions you wish to enforce are met
 */


/**
 *  Implementation of hook_boot - may need to run even for cached pages to check that the user
 *  should be allowed to continue
 *
 *  Added a try catch surrounding the entire thing - should something go wrong on the server - for example, 
 *  drupal_bootstrap fail because of an overloaded database - we want to just unset the cookie and return
 *
 *  IMPORTANT NOTE: Given the current order of code - IF they were to enable both signup wall and ad wall at the same time
 *  In situations where both would show - the ad wall will take precedence.
 */
function content_overlay_boot(){
  try {    
    //try to verify when we're coming through on purpose
    $wasset = FALSE;
    
    //unset the varnish cookie by making it expire in the past
    if(isset($_COOKIE['SESS00000000000000000000000000000000'])){
      $wasset = TRUE;
      setcookie('SESS00000000000000000000000000000000', '', time() - variable_get('content_overlay_cookie_duration', 1800000) / 1000, '/');
    } 
    //refresh the signup wall cookie
    if(isset($_COOKIE['content-overlay-visited'])){
      setcookie('content-overlay-visited', 'true', time() + variable_get('content_overlay_cookie_duration', 1800000) / 1000, '/');
    }
    
    //do a drupal_bootstrap to get some basic drupal functions
    drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);
    
    //get the user and request url
    $orig_dest = drupal_get_path_alias($_GET['q']);    
    global $user;
    //make sure the homepage redirects to /
    if($orig_dest == 'homepage'){
      $orig_dest = '';
    }
    
    //Get the page we're coming from
    $refer_page = _content_overlay_get_referrer();

    //Handle the signup wall
    //We want to show the signup wall if the user isn't logged in, hasn't seen it and is on the 3rth page view
    //We need to check it for non-varnish, but can't check it for varnish
    if($content_overlay && !isset($_COOKIE['content-overlay-visited']) && $user->uid == 0 && $wasset && (!isset($_COOKIE['content-overlay-count']) ||
         $_COOKIE['content-overlay-count'] > 1) ){
      //necessary for the check below
      $dontshow = variable_get('content_overlay_exclude', '');
      //  Check that the destination is not the signup wall
      if (!(stripos($orig_dest, 'signup') === 0)) {         
        if (arg(0) == 'node' && is_numeric(arg(1))) {
          if (_content_overlay_check_node(arg(1), $orig_dest)) {
            _content_overlay_show_content_overlay($orig_dest, arg(1));
          } 
        } 
        else if (!_content_overlay_has_values($types) && !_content_overlay_contains($orig_dest, $dontshow)) {
          _content_overlay_show_content_overlay($orig_dest);
        } 
      }
      return; // jump out so the ad wall can't get shown also
    }
    
    //Handle the ad wall
    //Check that the ad wall is enabled and that they haven't seen it this session.
    if($ad_wall && !isset($_COOKIE['content-overlay-session-seen']) && $wasset && _content_overlay_check_ad_referer($refer_page)){      
      variable_set('content_overlay_cur', array('arg' => arg(1), 'dest'=>$orig_dest, 'home'=>drupal_is_front_page()));
      if(arg(0) == 'node' && is_numeric(arg(1)) && _content_overlay_check_ad_node(arg(1), $orig_dest)) {
        _content_overlay_show_ad_wall($orig_dest, arg(1));
      } else if(drupal_is_front_page()) {
        _content_overlay_show_ad_wall($orig_dest, arg(1));
      }  
    }
    
  } catch(Exception $e) {
    if(isset($_COOKIE['SESS00000000000000000000000000000000'])){
      //unset the varnish cookie by making it expire in the past
      setcookie('SESS00000000000000000000000000000000', '', time() - variable_get('content_overlay_cookie_duration', 1800000) / 1000, '/');
    }
  }
}

/**
 *  Implements hook_menu() 
 *  to provide the configuration page and signup page
 */
function content_overlay_menu() {
  $items = array();
   
  $items['admin/settings/content_overlay'] = array(
    'title' => t('Content Overlay Settings'), 
    'description' => t('Configuration options for content overlay.'), 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('content_overlay_admin_settings'),
    'access arguments' => array('administer content overlay'), 
    'type' => MENU_NORMAL_ITEM,
    'file' => 'content_overlay.admin.inc',
  );
  
  return $items; 
}

/**
 *  Implements hook_perm() 
 *  used to determine who can access the signup wall settings page
 */
function content_overlay_perm() {
  return array('administer content overlay');
}

/**
 *  get the referer page - if its empty (they just typed the url or refreshed, just dump out
 */
 function _content_overlay_get_referrer(){
   $refer_page = FALSE;
   if(isset($_SERVER['HTTP_REFERER'])){
     $host = parse_url($_SERVER['HTTP_REFERER'], PHP_URL_HOST);
     //check that the request came from our server
     if($host == $_SERVER['HTTP_HOST']){
       $refer_page = parse_url($_SERVER['HTTP_REFERER'], PHP_URL_PATH);
     }
   } 
   
   return $refer_page;
 }
 
/**
 *  Implementation of hook_init
 *  add js to set a cookie to make varnish send the person's next request to apache
 *  
 *  we need to turn off aggregation for our js file for this to work properly
 */
function content_overlay_init() {
  drupal_add_css(drupal_get_path('module', 'content_overlay') . '/theme/content_overlay.css');
  drupal_add_js(drupal_get_path('module', 'content_overlay') . '/theme/content_overlay.js', 'module', 'header', FALSE, FALSE, FALSE);

  // Settings variable from configuration
  drupal_add_js(array('content_overlay' => array(
    'cookie_duration' => variable_get('content_overlay_cookie_duration', 1800000),
  )), 'setting');
}


/**
 *  A simple utility function to check whether a node is the correct type to show the signup wall.
 */
 function _content_overlay_check_node($nid, $orig_dest=FALSE){
   $types = variable_get('content_overlay_types', FALSE);
   //check to see if the node is a type that we should show the signup wall for
   $dontshow = variable_get('content_overlay_exclude', '');
   
   $node = db_fetch_object(db_query('select type from {node} where nid = %d', $nid));
   //using a custom function to trim extra newline characters - using just \n for cross os support
   return (!_content_overlay_has_values($types) || $types[$node->type]) && (!$orig_dest || !_content_overlay_contains($orig_dest, $dontshow) );
 }
 
/**
 *  A simple utility function to check whether a node is the correct type to show the ad wall.
 */
function _content_overlay_check_ad_node($nid, $orig_dest=FALSE){
  $types = variable_get('content_overlay_ad_types', array());
  //check to see if the node is a type that we should show the signup wall for
  $dontshow = variable_get('content_overlay_ad_exclude', '');
   
  $node = db_fetch_object(db_query('select type from {node} where nid = %d', $nid));
  //using a custom function to trim extra newline characters - using just \n for cross os support
  return (!_content_overlay_has_values($types) || $types[$node->type]) && (!$orig_dest || !_content_overlay_contains($orig_dest, $dontshow) );
}

/*
 *  Helper function to see if the current url is in the list of urls to not show the signup page for
 */
function _content_overlay_contains($path, $noshow){
  $page_match = drupal_match_path($path, $noshow);
  if ($path != $_GET['q']) {
    $page_match = $page_match || drupal_match_path($_GET['q'], $noshow);
  }
  return $page_match;   
}
  
################################## THEME FUNCTIONS ################################### 
/*
 * Theme function to theme the signup page
 */
function content_overlay_theme($existing, $type, $theme, $path) {
  return array(
    'content_overlay' => array(
      'arguments' => array('box_width' => variable_get('content_overlay_box_width', '700px'),
                           'box_height' => variable_get('content_overlay_box_height', '450px'),
                           'content' => variable_get('content_overlay_overlay_content', ''),
                           ),
      'path' => drupal_get_path('module', 'content_overlay') . '/theme',
      'template' => 'content_overlay',
    ),
  );
}


// put the popup together.
function content_overlay_box() {
  global $user;

  $output = '';
  $excluded = FALSE;

  // Check to see if it's actually enabled
  if (variable_get('content_overlay_enabled', FALSE) == 0) {
    $excluded = TRUE;
  }

  // Check to see if the path coincides with any excluded paths
  $current_page = drupal_get_path_alias($_GET['q']);    
  $excluded_pages = variable_get('content_overlay_excluded_pages', '');
  if(_content_overlay_contains($current_page, $excluded_pages)) {
    $excluded = TRUE;
  }

  // Checks to see if the user's role coincides with any excluded roles
  $excluded_roles = array_intersect(variable_get('content_overlay_excluded_roles', array()), array_keys($user->roles));
  if ($excluded_roles) {
    $excluded = TRUE;
  }

  // Checks to see if the current node is in the list of excluded node types
  $node = menu_get_object();
  $excluded_nodes = variable_get('content_overlay_node_types', array());
  if ($node->type && $excluded_nodes[$node->type] !== 0) {
    $excluded = TRUE;
  }

  // If any one of the above criterias are bot triggered, we show the pop up box on the page
  if ($excluded != TRUE) {
    $output .= theme('content_overlay');
  }

  return $output;
}


/**
 * Implementation of hook_footer.
 */
function content_overlay_footer() {
  $output = content_overlay_box();
  if($output != '') {
    return $output;
  }
}


/**
 *  Checks if an array has values that are not false or 0
 */
function _content_overlay_has_values($array){
  if(!is_array($array)) { return FALSE; }
  foreach($array as $value){
    if($value !== 0 && $value !== FALSE){
      return TRUE;
    }
  }
  return FALSE;
}



